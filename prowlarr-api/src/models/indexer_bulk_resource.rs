/*
 * Prowlarr
 *
 * Prowlarr API docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IndexerBulkResource {
    #[serde(rename = "ids", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ids: Option<Option<Vec<i32>>>,
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<i32>>>,
    #[serde(rename = "applyTags", skip_serializing_if = "Option::is_none")]
    pub apply_tags: Option<models::ApplyTags>,
    #[serde(rename = "enable", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enable: Option<Option<bool>>,
    #[serde(rename = "appProfileId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub app_profile_id: Option<Option<i32>>,
    #[serde(rename = "priority", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub priority: Option<Option<i32>>,
    #[serde(rename = "minimumSeeders", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub minimum_seeders: Option<Option<i32>>,
    #[serde(rename = "seedRatio", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub seed_ratio: Option<Option<f64>>,
    #[serde(rename = "seedTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub seed_time: Option<Option<i32>>,
    #[serde(rename = "packSeedTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pack_seed_time: Option<Option<i32>>,
    #[serde(rename = "preferMagnetUrl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prefer_magnet_url: Option<Option<bool>>,
}

impl IndexerBulkResource {
    pub fn new() -> IndexerBulkResource {
        IndexerBulkResource {
            ids: None,
            tags: None,
            apply_tags: None,
            enable: None,
            app_profile_id: None,
            priority: None,
            minimum_seeders: None,
            seed_ratio: None,
            seed_time: None,
            pack_seed_time: None,
            prefer_magnet_url: None,
        }
    }
}

