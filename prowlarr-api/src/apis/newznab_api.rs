/*
 * Prowlarr
 *
 * Prowlarr API docs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`api_v1_indexer_id_download_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV1IndexerIdDownloadGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_v1_indexer_id_newznab_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiV1IndexerIdNewznabGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`id_api_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdApiGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`id_download_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IdDownloadGetError {
    UnknownValue(serde_json::Value),
}


pub async fn api_v1_indexer_id_download_get(configuration: &configuration::Configuration, id: i32, link: Option<&str>, file: Option<&str>) -> Result<(), Error<ApiV1IndexerIdDownloadGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/indexer/{id}/download", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = link {
        local_var_req_builder = local_var_req_builder.query(&[("link", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = file {
        local_var_req_builder = local_var_req_builder.query(&[("file", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("apikey", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ApiV1IndexerIdDownloadGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_v1_indexer_id_newznab_get(configuration: &configuration::Configuration, id: i32, t: Option<&str>, q: Option<&str>, cat: Option<&str>, imdbid: Option<&str>, tmdbid: Option<i32>, extended: Option<&str>, limit: Option<i32>, offset: Option<i32>, minage: Option<i32>, maxage: Option<i32>, minsize: Option<i64>, maxsize: Option<i64>, rid: Option<i32>, tvmazeid: Option<i32>, traktid: Option<i32>, tvdbid: Option<i32>, doubanid: Option<i32>, season: Option<i32>, ep: Option<&str>, album: Option<&str>, artist: Option<&str>, label: Option<&str>, track: Option<&str>, year: Option<i32>, genre: Option<&str>, author: Option<&str>, title: Option<&str>, publisher: Option<&str>, configured: Option<&str>, source: Option<&str>, host: Option<&str>, server: Option<&str>) -> Result<(), Error<ApiV1IndexerIdNewznabGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/indexer/{id}/newznab", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = t {
        local_var_req_builder = local_var_req_builder.query(&[("t", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cat {
        local_var_req_builder = local_var_req_builder.query(&[("cat", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = imdbid {
        local_var_req_builder = local_var_req_builder.query(&[("imdbid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tmdbid {
        local_var_req_builder = local_var_req_builder.query(&[("tmdbid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = extended {
        local_var_req_builder = local_var_req_builder.query(&[("extended", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = minage {
        local_var_req_builder = local_var_req_builder.query(&[("minage", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maxage {
        local_var_req_builder = local_var_req_builder.query(&[("maxage", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = minsize {
        local_var_req_builder = local_var_req_builder.query(&[("minsize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maxsize {
        local_var_req_builder = local_var_req_builder.query(&[("maxsize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rid {
        local_var_req_builder = local_var_req_builder.query(&[("rid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tvmazeid {
        local_var_req_builder = local_var_req_builder.query(&[("tvmazeid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = traktid {
        local_var_req_builder = local_var_req_builder.query(&[("traktid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tvdbid {
        local_var_req_builder = local_var_req_builder.query(&[("tvdbid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = doubanid {
        local_var_req_builder = local_var_req_builder.query(&[("doubanid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = season {
        local_var_req_builder = local_var_req_builder.query(&[("season", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ep {
        local_var_req_builder = local_var_req_builder.query(&[("ep", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = album {
        local_var_req_builder = local_var_req_builder.query(&[("album", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = artist {
        local_var_req_builder = local_var_req_builder.query(&[("artist", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = track {
        local_var_req_builder = local_var_req_builder.query(&[("track", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = year {
        local_var_req_builder = local_var_req_builder.query(&[("year", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = genre {
        local_var_req_builder = local_var_req_builder.query(&[("genre", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = author {
        local_var_req_builder = local_var_req_builder.query(&[("author", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = publisher {
        local_var_req_builder = local_var_req_builder.query(&[("publisher", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = configured {
        local_var_req_builder = local_var_req_builder.query(&[("configured", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = source {
        local_var_req_builder = local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = host {
        local_var_req_builder = local_var_req_builder.query(&[("host", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = server {
        local_var_req_builder = local_var_req_builder.query(&[("server", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("apikey", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ApiV1IndexerIdNewznabGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn id_api_get(configuration: &configuration::Configuration, id: i32, t: Option<&str>, q: Option<&str>, cat: Option<&str>, imdbid: Option<&str>, tmdbid: Option<i32>, extended: Option<&str>, limit: Option<i32>, offset: Option<i32>, minage: Option<i32>, maxage: Option<i32>, minsize: Option<i64>, maxsize: Option<i64>, rid: Option<i32>, tvmazeid: Option<i32>, traktid: Option<i32>, tvdbid: Option<i32>, doubanid: Option<i32>, season: Option<i32>, ep: Option<&str>, album: Option<&str>, artist: Option<&str>, label: Option<&str>, track: Option<&str>, year: Option<i32>, genre: Option<&str>, author: Option<&str>, title: Option<&str>, publisher: Option<&str>, configured: Option<&str>, source: Option<&str>, host: Option<&str>, server: Option<&str>) -> Result<(), Error<IdApiGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{id}/api", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = t {
        local_var_req_builder = local_var_req_builder.query(&[("t", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cat {
        local_var_req_builder = local_var_req_builder.query(&[("cat", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = imdbid {
        local_var_req_builder = local_var_req_builder.query(&[("imdbid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tmdbid {
        local_var_req_builder = local_var_req_builder.query(&[("tmdbid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = extended {
        local_var_req_builder = local_var_req_builder.query(&[("extended", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = minage {
        local_var_req_builder = local_var_req_builder.query(&[("minage", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maxage {
        local_var_req_builder = local_var_req_builder.query(&[("maxage", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = minsize {
        local_var_req_builder = local_var_req_builder.query(&[("minsize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maxsize {
        local_var_req_builder = local_var_req_builder.query(&[("maxsize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rid {
        local_var_req_builder = local_var_req_builder.query(&[("rid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tvmazeid {
        local_var_req_builder = local_var_req_builder.query(&[("tvmazeid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = traktid {
        local_var_req_builder = local_var_req_builder.query(&[("traktid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tvdbid {
        local_var_req_builder = local_var_req_builder.query(&[("tvdbid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = doubanid {
        local_var_req_builder = local_var_req_builder.query(&[("doubanid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = season {
        local_var_req_builder = local_var_req_builder.query(&[("season", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ep {
        local_var_req_builder = local_var_req_builder.query(&[("ep", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = album {
        local_var_req_builder = local_var_req_builder.query(&[("album", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = artist {
        local_var_req_builder = local_var_req_builder.query(&[("artist", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = track {
        local_var_req_builder = local_var_req_builder.query(&[("track", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = year {
        local_var_req_builder = local_var_req_builder.query(&[("year", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = genre {
        local_var_req_builder = local_var_req_builder.query(&[("genre", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = author {
        local_var_req_builder = local_var_req_builder.query(&[("author", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = publisher {
        local_var_req_builder = local_var_req_builder.query(&[("publisher", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = configured {
        local_var_req_builder = local_var_req_builder.query(&[("configured", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = source {
        local_var_req_builder = local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = host {
        local_var_req_builder = local_var_req_builder.query(&[("host", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = server {
        local_var_req_builder = local_var_req_builder.query(&[("server", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("apikey", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<IdApiGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn id_download_get(configuration: &configuration::Configuration, id: i32, link: Option<&str>, file: Option<&str>) -> Result<(), Error<IdDownloadGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{id}/download", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = link {
        local_var_req_builder = local_var_req_builder.query(&[("link", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = file {
        local_var_req_builder = local_var_req_builder.query(&[("file", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query(&[("apikey", local_var_value)]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<IdDownloadGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

